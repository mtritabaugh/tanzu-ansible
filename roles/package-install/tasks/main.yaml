---
# set package variable
- set_fact:
    package={{ PACKAGE }}

# Check if package is already installed.
- name: package-installed-check
  command: "tanzu package installed get {{ PACKAGE }} -n {{ PACKAGE_NS }} -o yaml"
  environment:
    KUBECONFIG: "/home/{{ USER }}/.config/tanzu/clusters/{{ CLUSTER_NAME }}/config"
  register: is_installed


# If package exists, only print details
- when: "'Reconcile succeeded' in is_installed.stdout"
  block:

  - name: package-already-installed
    debug:
      msg: "{{ PACKAGE }} is already installed. {{is_installed.stdout_lines }}"

     
# If package doesn't exist, install it.
- when: "'does not exist' in is_installed.stderr"
  block:

  - name: get-package-version
    shell: "tanzu package available list {{ PACKAGE }}.tanzu.vmware.com -o yaml | yq e '.[0].version' -"
    environment:
      KUBECONFIG: "/home/{{ USER }}/.config/tanzu/clusters/{{ CLUSTER_NAME }}/config"
    register: version

  - set_fact:
      PACKAGE_VER={{ version.stdout }}

  ## check if data-values file already exists
  - name: data-values-check
    stat:
      path: "{{ DATA_VALUES_FILE }}"
    register: data_values
  
  ## If data-values file doesn't exist, pull it
  - when: not data_values.stat.exists
    block:

    ### Get the package URL
    - name: get-package-url
      command: "kubectl -n {{ PACKAGE_NS }} get packages {{ PACKAGE }}.tanzu.vmware.com.{{ PACKAGE_VER }} -o jsonpath='{.spec.template.spec.fetch[0].imgpkgBundle.image}'"
      environment:
        KUBECONFIG: "/home/{{ USER }}/.config/tanzu/clusters/{{ CLUSTER_NAME }}/config"
      register: url
    
    ### Pull the image bundle
    - name: get-image-bundle
      command: "imgpkg pull -b {{ url.stdout }} --registry-verify-certs=false -o /tmp/{{ PACKAGE }}"

    ### Remove comments from the data-values file
    - name: remove-comments-from-values
      shell: "yq -i eval '... comments=\"\"' /tmp/{{ PACKAGE }}/config/values.yaml"
    
    ### Create package specific directory for data-values file
    - name: create-directory
      ansible.builtin.file:
        path: "{{ DATA_VALUES_DIR }}"
        state: directory
        mode: '0755'
    
    ### Copy and rename data-values file 
    - name: copy-values 
      copy:
        src: "/tmp/{{ PACKAGE }}/config/values.yaml"
        dest: "{{ DATA_VALUES_FILE }}"

    ### If Harbor
    - when: package == "harbor"
      name: check if harbor
      block:
        #### Generate harbor passwords
        - name: generate-harbor-passwords
          command: "/tmp/{{ PACKAGE }}/config/scripts/generate-passwords.sh {{ DATA_VALUES_FILE }}"

    ### If grafana
    - when: package == "grafana"
      name: check if grafana
      block:
        #### Change grafana namespace
        - name: change-grafana-namespace
          ansible.builtin.replace:
            path: "{{ DATA_VALUES_FILE }}"
            regexp: 'tanzu-system-monitoring'
            replace: 'tanzu-system-dashboards'
    
  
  ## Install package
  - name: package-install
    command: "tanzu package install {{ PACKAGE }} --package-name {{ PACKAGE }}.tanzu.vmware.com --version {{ PACKAGE_VER }} -f {{ DATA_VALUES_FILE }} -n {{ PACKAGE_NS }}"
    environment:
      KUBECONFIG: "/home/{{ USER }}/.config/tanzu/clusters/{{ CLUSTER_NAME }}/config"
    register: out
  - debug: var=out.stdout_lines
  - debug: var=out.stderr_lines
  
  
